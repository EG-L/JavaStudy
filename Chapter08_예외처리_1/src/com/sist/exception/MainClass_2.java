package com.sist.exception;
//예외처리의 기본 (267page)
/*
 *     가장 많이 사용한다 => 예외복구
 *     try~catch~finally
 *     1) 형식 
 *        try{
 *           에러 없이 실행이 가능한 소스
 *           //main ==> 정상수행하는 문장 => 개발자 실수 또는 사용자 입력 문제
 *        }
 *        catch(Exception e){
 *          예외복구 ==> 다시 입력 요청 ==> 다음 문장으로 이동
 *        } ==> catch는 예상되는 예외를 따로 처리 => 여러 개 존재 가능
 *        
 *     2) 동작 흐름
 *       
 *       문장 1
 *       문장 2
 *       try ==> 전체 / 부분 => 에러가 발생할 수 있는 부분
 *       {
 *           문장 3
 *           문장 4
 *           문장 5
 *       }catch(Exception e)
 *       {
 *           문장 6
 *       }
 *       문장 7
 *       문장 8
 *       
 *       에러가 없는 경우)
 *          => 문장 1 - 문장 2 - 문장 3 - 문장 4 - 문장 5 - 
 *          => 문장 7 - 문장 8
 *-------------------------------------------------------------------
 *       문장 1
 *       문장 2
 *       try ==> 전체 / 부분 => 에러가 발생할 수 있는 부분
 *       {
 *           문장 3
 *           문장 4 => 에러 발생
 *           문장 5
 *       }catch(Exception e)
 *       {
 *           문장 6
 *       }
 *       문장 7
 *       문장 8
 *       
 *       에러가 있는 경우)
 *          => 문장 1 - 문장 2 - 문장 3 - 문장 6- 문장 7 - 문장 8
 *          
 *--------------------------------------------------------------------
 *
 *       문장 1
 *       문장 2 <== 에러 발생
 *       try ==> 전체 / 부분 => 에러가 발생할 수 있는 부분
 *       {
 *           문장 3
 *           문장 4 => 에러 발생 => catch로 이동 밑에 있는 문장은 수행을 못한다.
 *           문장 5
 *           ----------------------------
 *              int a = 10/0;
 *              System.out.println(a);
 *           ---------------------------- 무시 => catch
 *       }catch(Exception e)
 *       {
 *           문장 6 ==> 복구 ==> 문장 3번으로 이동
 *       }
 *       문장 7
 *       문장 8
 *       
 *       에러가 있는 경우)
 *          => 문장 1번만 수행 ==> 비정상종료
 *        
 *          try ==> 정상으로 수행하는 문장
 *                  => 개발자 실수 , 사용자 입력값 : 에러 발생
 *                                            --------
 *                                               | 종료 => 종료방지를 위해서 catch 수행
 *      
 *      *** 수행문장에 이상이 없는 경우 (에러가 없는 경우)
 *          try{} 내의 소스문장만 수행
 *      *** 수행문장에 이상이 있는 경우 (에러가 발생한 경우)
 *          try{} 내의 소스 문장을 수행하다 이상이 있는 경우 catch{}문으로 이동
 *
 * */
public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("문장 1");
		System.out.println("문장 2");
		try {
			System.out.println("문장 3");
			System.out.println(10/0);
			System.out.println("문장 5");
		}
		catch(Exception e) {
			System.out.println("문장 6");
		}
		System.out.println("문장 7");
		System.out.println("문장 8 == 정상종료");
	}

}
