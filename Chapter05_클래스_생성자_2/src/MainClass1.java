/*
 * 
 *   ==> 자바 기본 문법
 *      ------------
 *       데이터형 (메모리 크기)
 *         기본형
 *         참조형 => 클래스 / 배열
 *       클래스
 *        = 데이터만 모아서 관리 => 변수
 *          ---------------
 *           => 초기화
 *              = 명시적 초기화
 *              = 초기화블록
 *              = 생성자 ========> 가장 많이 사용
 *        = 메소드만 모아서 관리
 *        
 *        1) 클래스의 구성
 *          class ClassName
 *          {
 *             --------------
 *              데이터 저장 공간 : 멤버변수 => 프로그램 종료 시까지 유지
 *                            => 다른 클래스에서도 사용이 가능
 *              인스턴스 변수 => new를 이용해서 메모리에 저장
 *                           => 메모리 공간 따로 생성
 *                데이터형 변수명; 
 *              공유 변수(클래스 변수) => 컴파일러에 의해 자동 생성
 *                                   => 메모리 공간을 1개만 사용
 *                static 데이터형 변수명;
 *             --------------
 *              생성자 : 변수에 대한 초기화
 *                  *** 클래스 영역에서는 선언만 가능
 *                  = 특징
 *                     클래스명과 동일
 *                     리턴형이 없다
 *                     여러개를 사용 할 수 있다
 *                     -------------------
 *                      같은 이름으로 여러 개 사용 => 오버로딩
 *                      ** 오버로딩 : 중복 함수 정의(95%)
 *                         => 기술 면접 단골
 *                         => 면접 (자바에 대한 질문)
 *                         => new , add
 *                         => 메소드명이 동일하다.
 *                         => 매개변수의 개수나 데이터형이 다르다
 *                         => 리턴형은 관계가 없다.
 *                       A() => A()
 *                       A(int a,int b) => A(int, int)
 *                       A(String s, double d) => A(String, double)
 *                       ***A(int c,int d)  => A(int, int)
 *                       => 실제 메소드에도 적용
 *                       *** void도 리턴형이다.
 *                         오버라이딩 
 *                         => modify(수정)
 *                         
 *                         
 *              기타
 *                생성자를 사용하지 않고 초기화하는 방법
 *                => 인스턴스 블록
 *                   {
 *                        구현 => 변수 초기값
 *                   }
 *                   ==> 생성자
 *                   
 *                => 정적 블록
 *                   static**********
 *                   {
 *                        구현 => static 변수 초기화
 *                   }
 *                   
 *             예)
 *                 class A
 *                 {
 *                     int[] arr = new int[5];
 *                     
 *                     A(){
 *                     }
 *                 }
 *                 A a = new A(); ==> arr저장
 *                 class A
 *                 {
 *                    static int[] arr = new int[5];
 *                    static{
 *                       초기화 ==> 자동
 *                    }
 *                 }
 *                 A.arr();
 *             --------------
 *             멤버메소드
 *               = static 메소드 => 메모리가 한개만 생성
 *                 static 리턴형 메소드(매개변수 목록){
 *                   
 *                 }
 *               = 인스턴스 메소드 => 따로 생성
 *                 리턴형 메소드(매개변수 목록){
 *                 }
 *             --------------
 *             class A{
 *                int a;
 *                int b;
 *                void display(){
 *                }
 *             }
 *             A aa =new A();
 *             
 *             -----aa-----
 *                ---------
 *                a
 *                ---------
 *                b
 *                ---------
 *                display()
 *                ---------
 *             ------------
 * */
// 생성자 => 데이터베이스 연동 (데이터가 저장되는 장소)
//         윈도우 초기화 (시작과 동시에 레이아웃을 잡아서 처리)
//         서버 연결 및 구동
/*
 *   메소드 : 인스턴스 메소드 => new를 이용해서 메모리에 저장할 때마다 생성되는 메소드
 *          ------------ 객체 생성마다 따로 동작
 *          호출 => 객체명.메소드();
 *                -------------
 *    형식)
 *         리턴형 메소드명(매개변수목록) => 선언부
 *         {
 *            구현부
 *         }
 *         
 *         리턴형 => 요청에 대한 결과값 (1개만 사용이 가능)
 *                 => 여러 개인 경우 : 클래스/배열
 *                 => 리턴형이 없는 경우 : void
 *           | 기본형 , 배열 , 클래스
 *          메소드명 => 알파벳
 *                    숫자를 사용할 수 있다(맨 앞에 사용은 할 수 없다)
 *                    키워드 사용 할 수 없다.
 *                    ---- 클래스명, 메소드는 키워드가 아니다.
 *                    공백이 있으면 안된다.
 *                    특수문자 사용할 수 있다( $, _ )
 *                    약속) 소문자로 시작한다 , 두번째 첫자는 대문자 사용
 *                    *** 소프트웨어 이행
 *                        ----------- 한글에 문제가 생긴다.
 *                                    가급적이면 영문을 사용한다.
 *                           윈도우 개발 => 서버 리눅스 사용
 *                           Full Stack => AWS(PaaS)
 *                           => STS : 11
 *                           => tomcat => 9
 *                              spring-boot => 2.7.4
 *                              javax
 *                           ------------------------
 *          매개변수(Parameter) : 사용자가 보내준 값
 *                  --------------- 여러개 있을 수 있다. ( 3개이상 초과 금지 )
 *                  3개 이상일 때는 클래스 / 배열 이용
 *          void 메소드명()
 *          {
 *              --- 구현
 *              return; => 생략이 가능 => 컴파일러 자동 추가
 *              ------ 메소드 종료 : 원하는 위치에 설정이 가능
 *          }
 *          
 *          void 메소드명()
 *          {
 *              if()
 *                return;
 *                //코드 사용이 불가능
 *              else
 *                return;
 *          }
 *                  
 *          int 메소드명()
 *          ---
 *          {
 *             return 정수값;
 *                   ------ 데이터형이 더 크거나 같아야 한다.
 *          }
 *          int[] 메소드명()
 *          {
 *             int[] arr = new int[10];
 *             return arr;
 *          }
 *          
 *          class A
 *          A 메소드명{
 *             A a = new A();
 *               -
 *             
 *             return a;
 *                    -
 *          }
 *          A a = 메소드명();
 *          
 *          ***** 메소드는 호출시마다 처음부터 마지막까지 실행한다.
 *          
 *          예)
 *              void aaa()
 *              {
 *                  1
 *                  2
 *                  3
 *                  return;
 *              }
 *              void main()
 *              {
 *                 4
 *                 5
 *                 aaa()
 *                 6
 *                 7
 *                 aaa()
 *                 8
 *                 9
 *                 return
 *              }
 *              4->5->1->2->3->6->7->1->2->3->8->9
 *              반복제거 , 재사용 , 유지보수가 용이 (소스가 간결)
 *                             ----------------------- 
 *                                   | 구조적인 프로그램
 *              객체지향 프로그램 => 메소드
 *              
 *         프로그램 기획
 *           벤치마킹 / 요구사항 분석
 *           ------------------ 변수/메소드
 *       
 *       예)
 *           숫자 야구게임
 *           멤버변수
 *             com[] user[] s
 *           컴퓨터 난수 발생 => 3개 발생 => com[]
 *           사용자가 입력 => 3개 => user[]
 *           비교 => com[] user[]
 *           힌트 => user[] s, b
 *           종료 => s
 * */
import java.util.*;
class User{
	// 5개의 정수 난수발생 => 정렬하는 프로그램 제작 => 출력 메소드
	int[] arr = new int[5];
	User() {
		for(int i = 0; i<arr.length;i++) {
			arr[i] = (int)(Math.random()*100)+1;
		}
		System.out.println("정렬 전 :");
		System.out.println(Arrays.toString(arr));
	}
	
	void sort() {
		for(int i = 0; i<arr.length-1;i++) {
			for(int j=i+1;j<arr.length;j++) {
				if(arr[i]>arr[j]) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
	}
	void print() {
		System.out.println("정렬 후 :");
		System.out.println(Arrays.toString(arr));
	}
}
public class MainClass1 {
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		User user = new User();
		user.sort();
		user.print();

	}

}
