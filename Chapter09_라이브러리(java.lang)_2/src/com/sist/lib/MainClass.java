package com.sist.lib;
/*
 *    java.lang => 자바 소스의 기본 => 많이 사용이 되는 패키지
 *              => import 생략할 수 있다
 *              => java.lang에 있는 대부분의 클래스는
 *                 final클래스가 많다.
 *                 ----- 확장이 불가능하기 때문에 있는 그대로 사용(암기)
 *                 String , StringBuffer, Math, System
 *                 Wrapper
 *                 예외 : Object
 *    => Object : 최상위 클래스 => 모든 클래스의 상위 클래스
 *                (사용자 정의 , 라이브러리 => 모든 클래스는 Object로부터 상속을 받는다.)
 *                = toString() : 객체를 문자열화
 *                               기본은 메모리 주소 출력
 *                               => 오버라이딩(멤버변수 값 확인)
 *                = clone() : 메모리주소 복제 => 새로운 메모리 생성
 *                  ------- 게임(아바타) => 디자인패턴, 알고리즘
 *                                       --------------- 스프링전에
 *                = finalize() : 소멸자함수 (자동 호출) => 메모리 해제 시
 *    => System : 출력 및 메모리 해제, 프로그램 종료
 *               = ***println() : => 에러 출력
 *                                => 멤버변수 값 확인
 *                                => 전송값 확인
 *                 윈도우 / 브라우저 => 자체 출력 => 디버깅
 *               = gc() : 가비지 컬렉션을 호출 메모리 해제
 *                 => 멀티미디어 , 애니메이션 
 *                    ==> 실시간 도로 cctv
 *               = exit() : 종료
 *                     -- 0(정상종료) , else (비정상종료)
 *    => Math : 수학 => 모든 메소드가 static
 *              = 메모리 할당을 하지 않고 클래스 이름을 접근
 *              => Math.메소드명
 *               = random() : 임의의 난수를 발생 ( double )
 *                            -------- 0.0 ~0.99
 *               = ceil() : 올림 함수 ( double )
 *                 ------ 페이지 계산 시 주로 사용
 *    => StringBuffer : String을 보완 => 문자열 결합 시 최적화
 *               = append
 *    => String : 문자열 관리하는 클래스
 *               = ***startsWith : 문자열이 지정한 문자로 시작
 *                 ----------- 검색기
 *               = endsWith : 문자열이 마지막에 지정한 문자가 있는 지 확인
 *               = equals : 두개의 String값을 비교하여 같은지
 *                 객채생성
 *                 ------
 *                   => 모든 값을 저장할 수 없다.
 *                   => 모든 값을 저장하기 위해서 메모리를 모아서 저장
 *                                         --------------- Heap
 *                   => 객체에는 heap에 저장되어 있는 메모리 주소를 가지고 있다.
 *                                            ---------- 참조변수
 *                   => 주소비교 == , 실제 저장된 값 비교 equals
 *                   => 웹 : 로그인, 아이디 찾기, 아이디 중복
 *                      -- CRUD(게시판) => 회원가입 => 로그인 ...
 *                      -- 목록 (페이지 나누기) => 상세보기 (댓글)
 *                      -- 최신방문 (쿠키) , 로그인상태 유지(세션)
 *                   => 대소문자 구분
 *               = indexof : 문자열에 몇번째 있는지
 *                   = String => char[]을 이용한 클래스
 *                              -------
 *                               => 문자열의 번호 => 0번부터 시작
 *                   = String s = "hello Java";
 *                                 0123456789
 *                            =>  {'h','e','l','l','o',' ','J'...'a'}
 *                     public char charAt(int index)
 *                                 
 *               = lastindexof : 지정한 문자열 문자가 마지막 몇번째에 있는지
 *               = length : 문자열의 길이를 반환
 *                 => 비밀번호 / 글쓰기 ....
 *                            ------ 오라클의 지정된 문자 갯수 초과
 *                            => 오라클은 문자 갯수 지정
 *                            => title VARCHAR2(1000) => 한글은 300자 사용이 가능
 *                               => unicode 시 한글은 3byte
 *                   ------- 8자리
 *               = replace : 문자열에 지정한 문자 " "값이 있으면 새로운 문자를 지정한 문자 " "로 바꿔서 출력
 *                  => 오라클에 값을 저장할 때 사용
 *                           -------- 이미지 => &, ||
 *                           & => Scanner
 *                           || => 문자열결합
 *               = replaceAll : 정규표현식을 지정한 문자로 바꿔서 출력
 *                  = 정규식
 *                    ----- 공부 : 데이터 분석
 *                     => 패턴 (문자열의 형태)
 *                     => 맛집 => 어떤 맛
 *                               짜다 , 싱겁다, 맵다 ...
 *                               ---
 *                               짜다 , 짜고 , 짜니 ...
 *                               ^짜
 *                     => 기호 (+, *, ^, $, ., |) ==> 자체 => \\
 *               = split : 지정한 문자로 문자열을 나눌 수 있다.
 *                 => java.util. => ***StringTokenizer
 *               = subString : 문자열에 지정한 범위에 속하는 문자열을 반환
 *               = toUpperCase: 소문자를 대문자로 반환
 *               = toLowerCase : 대문자를 소문자로 반환
 *               = trim : 문자열에 공백을 제거해 준다.
 *               = toString : 지정한 개체의 원시 값을 반환(데이터형을 문자열로 반환)
 *                 -------- 문자열 반환 => 데이터형을 문자형으로 변경
 *               = contains : 두개의 String을 비교하여 포함하고 있으면 true 없으면 false
 *               = charAt : index번째의 문자를 반환
 *               = concat : 문자와 문자를 결합
 *                 => MySQL은 문자열 결합 => concat()
 *                 => 오라클 => || (문자열 결합)
 *               = format : 서식문자열을 이용해서 서식화된 문자열을 반환
 *                 String.format("%d%d%d",10,20,30);
 *                 ------ static
 *                 public static String format(String s,Object...obj)
 *                                                           ----- 가변 매개변수
 *        Object 클래스의 메소드
 *        
 *        1. clone : 객체의 복사본을 만들어 리턴
 *        2. equals : 현재 개체와 매개 변수로 넘겨 받은 객체가 같은 지 확인
 *        3. finalize : 현재 객체가 더 이상 쓸모 없어졌을 때 가비지 컬렉터에 의해서 반환
 *        4. toString : 객체를 문자열로 표현하는 값을 리턴
 * */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
