/*
 *    메소드 : 한개의 기능 수행하는 명령문의 집합
 *          ----------      ------
 *                           변수,제어문,연산자
 *    1) 메소드 구조
 *       [접근지정어][옵션사항] 리턴형 메소드명(매개변수 목록..) => 선언문
 *       {
 *           구현
 *           ...
 *           ...
 *           ...
 *           return 값
 *           => void 선언 시 return 생략 가능
 *                        --------
 *                          |컴파일러에 의해 자동 추가
 *           => return 문장은 메소드의 종료(반드시 필요)
 *           
 *       }
 *       
 *       메소드 : 호출 => 메소드는 처음부터 끝까지 실행을 하고
 *                     원래 호출 위치로 복귀
 *       예)
 *           void aaa()
 *           {
 *               1번 문장 =>3번 실행 =>9번 실행
 *               2번 문장 =>4번 실행 =>10번 실행
 *               3번 문장 =>5번 실행 =>11번 실행
 *               return; => 메소드 종료 => 호출 위치로 복귀
 *           }
 *           void main()
 *           {
 *               4번 문장 =>1번 실행
 *               aaa(); =>2번 실행
 *               5번 문장 =>6번 실행
 *               6번 문장 =>7번 실행
 *               aaa(); =>8번 실행
 *               7번 문장 =>12번 실행
 *           }
 *           => 반복적인 문장이 있는 경우(반복제거)
 *           => 기능별 분리하기 때문에 코드 간결
 *              -------- 수정하기 편리하다 , 에러처리가 편리하다.
 *           => 다른 클래스와 연결시에 주로 사용(재사용성)
 *           => 객체 지향 : 변수, 메소드
 *           => 클래스 구성 : 변수, 메소드
 *           => 메소드가 존재하면 좋은 점 : 분산이 가능하다.(여러 명 동시 개발 가능)
 *       
 *    2) 리턴형 결정
 *       사용자 요청에 대한 결과 값 도출
 *       => 한 개만 설정이 가능
 *          여러개 => 묶어서 전송
 *                 ---------- 한개로 인식(배열 , 클래스)
 *       예)
 *           =>사용자 정의 데이터형
 *           class Movie{
 *              String title;
 *              String director;
 *              String actor;
 *              double score;
 *              int rank;
 *           }
 *       = 결과 값이 있는 경우 => 결과 값 설정
 *                          = 기본형
 *                          = 배열
 *       = 결과 값이 없는 경우(메소드 자체 처리) => void
 *         void => 결과를 메소드에서 출력
 *       = 리턴형과 결과값은 가급적이면 동일
 *         ---- 리턴형이 결과값보다 크거나 같을 수 있다. => 예측을 못할 수 있다.
 *         예) int 메소드명()
 *            ---- 리턴형 (long, double, float)
 *            {
 *               return 값;
 *                     ---- 결과값
 *            }
 *            *** boolean / String => 대체할 수 없다.
 *    3) 매개변수(Parameter) : 사용자로부터 요청받은 값
 *                          -------------------
 *                          예)
 *                             로그인 요청 => ID, PWD
 *                             아이디 체크 => ID
 *                             우편번호 검색 => 동/읍/면
 *                             영화검색 => 검색어
 *                          => 여러개를 사용할 수 있다.
 *                          => 가급적이면 매개변수는 적게 사용하는 것이 좋다.
 *                                     ---------------
 *                                       | 3개 정도
 *                                       => 3개 이상 => 배열, 클래스
 *                          => 예측을 못하는 경우
 *                             ------------- => 가변 매개변수 (...)
 *    4) 메소드명
 *       => 식별자 이용 (변수 명칭법)
 *          -----
 *          1. 알파벳이나 한글로 시작
 *            ------ 운영체제에 영향이 없다.(윈도우, 리눅스,맥)
 *            ------ 소프트웨어 이식(개발 => 윈도우 -> 리눅스 )
 *            => 알파벳은 대소문자 구분
 *          2. 숫자 사용 가능 (앞에 사용은 할 수 없다)
 *          3. 특수문자 사용 가능($ , _ )
 *          4. 키워드 사용 불가능
 *            ------ 변수명, 메소드명, 클래스명 (X)
 *          5. 공백 미포함
 *          6. 메소드명의 길이 (제한은 없으나 편의성을 위해 적절한 크기(3~15) 설정)
 *             => 추가 (board_insert,boardInsert)
 *          7. 약속
 *             => 소문자 시작한다
 *             => 두개의 단어가 붙었을 시 두번 째 단어의 첫자는 대문자로 선언한다.
 *               -------------------- 헝가리안식 표기법
 *        ===> 변수/상수/메소드/클래스/인터페이스/열거형
 *            --------------------------------
 *    5) 호출 => 실행과정
 *    
 * */
public class 메소드1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
